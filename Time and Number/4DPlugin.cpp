/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Time and Number
 #	author : miyako
 #	2013/07/31
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "functions_time.h"
#include "functions_rbnf.h"

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Time

		case 1 :
			TIME_Get_offset(pResult, pParams);
			break;

		case 2 :
			TIME_Date_to_text(pResult, pParams);
			break;

		case 3 :
			TIME_Date_from_text(pResult, pParams);
			break;

		case 4 :
			TIME_Absolute_from_text(pResult, pParams);
			break;

		case 5 :
			TIME_Absolute_to_text(pResult, pParams);
			break;

		case 6 :
			TIME_Date_from_absolute(pResult, pParams);
			break;

		case 7 :
			TIME_Date_to_absolute(pResult, pParams);
			break;

// --- Timezone

		case 8 :
			TIMEZONE_Get_region(pResult, pParams);
			break;

		case 9 :
			TIMEZONE_Get_default(pResult, pParams);
			break;

		case 10 :
			TIMEZONE_Get_offset(pResult, pParams);
			break;

		case 11 :
			TIMEZONE_Get_display_name(pResult, pParams);
			break;

		case 12 :
			TIMEZONE_Get_GMT(pResult, pParams);
			break;

// --- Number

		case 13 :
			NUMBER_Format(pResult, pParams);
			break;

	}
}

void _PrintUnicodeString(UnicodeString &str){
 
	C_TEXT t;
	t.setUTF16String((const PA_Unichar *)str.getBuffer(), str.length());
	CUTF8String u;
	t.copyUTF8String(&u);
	printf((const char *)u.c_str());
 
}
 
bool _TextSetUnicodeString(C_TEXT &param, UnicodeString &str){
	
	bool success = false;
	
	UErrorCode status = U_ZERO_ERROR;
	int32_t len = str.length() + 1;
	std::vector<UChar> buf(len);	
	str.extract((UChar *)&buf[0], len, status);
	
	if(status == U_ZERO_ERROR || status == U_USING_DEFAULT_WARNING || status == U_USING_FALLBACK_WARNING){
		param.setUTF16String((const PA_Unichar *)&buf[0], len);
		success = true;
	}
	
	return success;
}

bool _CUTF8SetUnicodeString(CUTF8String &ustr, UnicodeString &str){
	
	bool success = false;
	
	C_TEXT t;
	
	if(_TextSetUnicodeString(t, str)){
		
		CUTF8String u;
		t.copyUTF8String(&ustr);
		
	}	
	
	return success;
}

